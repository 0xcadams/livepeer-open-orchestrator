---
global:
  isPrimaryCluster: false
  releaseVersion: changeme
  projectName: changeme
  domain: changeme
  region: changeme
  allRegions:
    - "us-east-1"
    - "eu-central-1"

thanos:
  existingObjstoreSecret: "thanos-config"
  query:
    enabled: false
    dnsDiscovery:
      enabled: false
    stores:
      - "dnssrv+_grpc._tcp.global-kube-prometheus-sta-thanos-discovery.default.svc.cluster.local"
      - "eu-central-1.thanos.livepeer.0xcadams.xyz:10901"
  queryFrontend:
    enabled: false
  compactor:
    enabled: false
  storegateway:
    enabled: false
  ruler:
    enabled: false
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
              - key: alpha.eksctl.io/nodegroup-name
                operator: In
                values:
                  - general-1

cert-manager:
  installCRDs: true
  prometheus:
    enabled: true
    servicemonitor:
      enabled: true
      labels:
        release: "global"
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
              - key: alpha.eksctl.io/nodegroup-name
                operator: In
                values:
                  - general-1

nvidia-device-plugin:
  allowDefaultNamespace: true

letsencrypt:
  email: me@changeme.com
  api: https://acme-v02.api.letsencrypt.org/directory

external-dns:
  policy: sync
  provider: aws
  txtOwnerId: changeme
  txtPrefix: changeme
  extraArgs:
    - "--annotation-filter=external-dns.alpha.kubernetes.io/exclude notin (true)"

kube-prometheus-stack:
  ingress:
    supportsPathType: true
  grafana:
    enabled: false
    adminPassword: changeme
    sidecar:
      datasources:
        uid: thanos
        url: http://global-thanos-query-frontend:9090
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
                - key: alpha.eksctl.io/nodegroup-name
                  operator: In
                  values:
                    - general-1
  prometheus:
    prometheusOperator:
      thanosImage:
        tag: v0.26.0
    prometheusSpec:
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      thanos:
        objectStorageConfig:
          key: "objstore.yml"
          name: "thanos-config"
      externalLabels:
        region: changeme
        version: changeme
    thanosService:
      enabled: true
    thanosServiceMonitor:
      enabled: true
    thanosIngress:
      enabled: true
      pathType: Prefix
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-cluster-issuer"
        nginx.ingress.kubernetes.io/backend-protocol: GRPC
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/grpc-backend: "true"
        nginx.ingress.kubernetes.io/protocol: h2c
      hosts:
        - changeme.com
      tls:
        - secretName: global-thanos-ingress-tls-secret
          hosts:
            - changeme.com

prometheus-json-exporter:
  enabled: false
  serviceMonitor:
    enabled: true
    targets:
      - name: stream-scores
        url: https://changeme.com
  configuration:
    config: |
      ---
      metrics:
        - name: transcoding_stream_scores
          type: object
          help: Raw transcoder stats
          path: '{.FRA[0]}'
          labels:
            id: '{.timestamp}'
            source: '{.region}'
          values:
            segments_sent: '{.segments_sent}'
            segments_received: '{.segments_received}'
            success_rate: '{.success_rate}'
            seg_duration: '{.seg_duration}'
            upload_time: '{.upload_time}'
            download_time: '{.download_time}'
            transcode_time: '{.transcode_time}'
            round_trip_time: '{.round_trip_time}'
        - name: transcoding_stream_scores
          type: object
          help: Raw transcoder stats
          path: '{.LAX[0]}'
          labels:
            id: '{.timestamp}'
            source: '{.region}'
          values:
            segments_sent: '{.segments_sent}'
            segments_received: '{.segments_received}'
            success_rate: '{.success_rate}'
            seg_duration: '{.seg_duration}'
            upload_time: '{.upload_time}'
            download_time: '{.download_time}'
            transcode_time: '{.transcode_time}'
            round_trip_time: '{.round_trip_time}'
        - name: transcoding_stream_scores
          type: object
          help: Raw transcoder stats
          path: '{.LON[0]}'
          labels:
            id: '{.timestamp}'
            source: '{.region}'
          values:
            segments_sent: '{.segments_sent}'
            segments_received: '{.segments_received}'
            success_rate: '{.success_rate}'
            seg_duration: '{.seg_duration}'
            upload_time: '{.upload_time}'
            download_time: '{.download_time}'
            transcode_time: '{.transcode_time}'
            round_trip_time: '{.round_trip_time}'
        - name: transcoding_stream_scores
          type: object
          help: Raw transcoder stats
          path: '{.MDW[0]}'
          labels:
            id: '{.timestamp}'
            source: '{.region}'
          values:
            segments_sent: '{.segments_sent}'
            segments_received: '{.segments_received}'
            success_rate: '{.success_rate}'
            seg_duration: '{.seg_duration}'
            upload_time: '{.upload_time}'
            download_time: '{.download_time}'
            transcode_time: '{.transcode_time}'
            round_trip_time: '{.round_trip_time}'
        - name: transcoding_stream_scores
          type: object
          help: Raw transcoder stats
          path: '{.NYC[0]}'
          labels:
            id: '{.timestamp}'
            source: '{.region}'
          values:
            segments_sent: '{.segments_sent}'
            segments_received: '{.segments_received}'
            success_rate: '{.success_rate}'
            seg_duration: '{.seg_duration}'
            upload_time: '{.upload_time}'
            download_time: '{.download_time}'
            transcode_time: '{.transcode_time}'
            round_trip_time: '{.round_trip_time}'
        - name: transcoding_stream_scores
          type: object
          help: Raw transcoder stats
          path: '{.PRG[0]}'
          labels:
            id: '{.timestamp}'
            source: '{.region}'
          values:
            segments_sent: '{.segments_sent}'
            segments_received: '{.segments_received}'
            success_rate: '{.success_rate}'
            seg_duration: '{.seg_duration}'
            upload_time: '{.upload_time}'
            download_time: '{.download_time}'
            transcode_time: '{.transcode_time}'
            round_trip_time: '{.round_trip_time}'
        - name: transcoding_stream_scores
          type: object
          help: Raw transcoder stats
          path: '{.SIN[0]}'
          labels:
            id: '{.timestamp}'
            source: '{.region}'
          values:
            segments_sent: '{.segments_sent}'
            segments_received: '{.segments_received}'
            success_rate: '{.success_rate}'
            seg_duration: '{.seg_duration}'
            upload_time: '{.upload_time}'
            download_time: '{.download_time}'
            transcode_time: '{.transcode_time}'
            round_trip_time: '{.round_trip_time}'

ingress-nginx:
  # this configures the nginx pod to listen to port 8935 and forward to our orchestrator service
  # and 10901 to forward to thanos
  tcp:
    8935: "default/orchestrator:8935"
    10901: "default/global-kube-prometheus-sta-thanos-discovery:10901"
  controller:
    metrics:
      enabled: true
      serviceMonitor:
        additionalLabels:
          release: global
        enabled: true
    replicaCount: 1
    config:
      hsts-preload: "true"
