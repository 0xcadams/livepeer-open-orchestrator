apiVersion: skaffold/v2beta21
kind: Config

deploy:
  helm:
    releases:
      - name: global
        createNamespace: true
        chartPath: charts/global
        setValueTemplates:
          global.isPrimaryCluster: "{{.IS_PRIMARY_CLUSTER}}"
          global.releaseVersion: "{{.RELEASE_VERSION}}"
          global.projectName: "{{.PROJECT_NAME}}"
          global.region: "{{.AWS_REGION}}"
          global.domain: "{{.DOMAIN}}"
          global.awsAccessKeyId: "{{.NODE_AWS_ACCESS_KEY_ID}}"
          global.awsSecretAccessKey: "{{.NODE_AWS_SECRET_ACCESS_KEY}}"
          global.primaryJsonWalletPassword: "{{.PRIMARY_JSON_WALLET_PASSWORD}}"
          global.secondaryJsonWalletPassword: "{{.SECONDARY_JSON_WALLET_PASSWORD}}"
          external-dns.txtPrefix: "{{.AWS_REGION}}."
          external-dns.txtOwnerId: "{{.PROJECT_NAME}}"
          letsencrypt.email: "{{.SUPPORT_EMAIL}}"
          nvidia-device-plugin.enabled: "{{.IS_K3S}}"
          prometheus-json-exporter.enabled: "{{.IS_PRIMARY_CLUSTER}}"
          prometheus-json-exporter.serviceMonitor.targets[0].url: "https://leaderboard-serverless.vercel.app/api/raw_stats?orchestrator={{.ETH_ADDRESS}}"
          kube-prometheus-stack.prometheus.prometheusSpec.externalLabels.region: "{{.AWS_REGION}}"
          kube-prometheus-stack.prometheus.prometheusSpec.externalLabels.version: "{{.RELEASE_VERSION}}"
          kube-prometheus-stack.grafana.enabled: "{{.IS_PRIMARY_CLUSTER}}"
          kube-prometheus-stack.grafana.adminPassword: "{{.GRAFANA_PASSWORD}}"
          kube-prometheus-stack.prometheus.thanosIngress.hosts[0]: "{{.AWS_REGION}}.thanos.{{.DOMAIN}}"
          kube-prometheus-stack.prometheus.thanosIngress.tls[0].hosts[0]: "{{.AWS_REGION}}.thanos.{{.DOMAIN}}"
          kube-prometheus-stack.prometheus.thanosIngress.tls[0].secretName: "global-thanos-ingress-tls-secret"
          thanos.query.enabled: "{{.IS_PRIMARY_CLUSTER}}"
          thanos.queryFrontend.enabled: "{{.IS_PRIMARY_CLUSTER}}"
          thanos.compactor.enabled: "{{.IS_PRIMARY_CLUSTER}}"
          thanos.storegateway.enabled: "{{.IS_PRIMARY_CLUSTER}}"
      # - name: geth
      #   createNamespace: true
      #   chartPath: charts/geth
      #   setValueTemplates:
      #     global.isPrimaryCluster: "{{.IS_PRIMARY_CLUSTER}}"
      #     global.releaseVersion: "{{.RELEASE_VERSION}}"
      #     global.projectName: "{{.PROJECT_NAME}}"
      #     global.region: "{{.AWS_REGION}}"
      #     global.domain: "{{.DOMAIN}}"
      #     geth.region: "{{.AWS_REGION}}"
      - name: arbitrum
        createNamespace: true
        chartPath: charts/arbitrum
        setValueTemplates:
          global.isPrimaryCluster: "{{.IS_PRIMARY_CLUSTER}}"
          global.releaseVersion: "{{.RELEASE_VERSION}}"
          global.projectName: "{{.PROJECT_NAME}}"
          global.region: "{{.AWS_REGION}}"
          global.domain: "{{.DOMAIN}}"
          arbitrum.infuraProjectId: "{{.INFURA_PROJECT_ID}}"
          arbitrum.ftkuhnsmanApiKey: "{{.FTKUHNSMAN_API_KEY}}"
          arbitrum.rpc.username: "{{.RPC_BASIC_AUTH_USERNAME}}"
          arbitrum.rpc.password: "{{.RPC_BASIC_AUTH_PASSWORD}}"
      - name: orchestrator
        createNamespace: true
        chartPath: charts/orchestrator
        setValueTemplates:
          global.isPrimaryCluster: "{{.IS_PRIMARY_CLUSTER}}"
          global.releaseVersion: "{{.RELEASE_VERSION}}"
          global.projectName: "{{.PROJECT_NAME}}"
          global.region: "{{.AWS_REGION}}"
          global.domain: "{{.DOMAIN}}"
          orchestrator.ethAddress: "{{.ETH_ADDRESS}}"
          orchestrator.pricePerUnit: "{{.PRICE_PER_UNIT}}"
          orchestrator.reward: "{{.IS_PRIMARY_CLUSTER}}"
      - name: tester
        createNamespace: true
        chartPath: charts/tester
        setValueTemplates:
          global.isPrimaryCluster: "{{.IS_PRIMARY_CLUSTER}}"
          global.releaseVersion: "{{.RELEASE_VERSION}}"
          global.projectName: "{{.PROJECT_NAME}}"
          global.region: "{{.AWS_REGION}}"
          global.domain: "{{.DOMAIN}}"
          tester.ethAddress: "{{.ETH_ADDRESS}}"
          tester.maxPricePerUnit: "{{.PRICE_PER_UNIT}}"
