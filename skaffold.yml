apiVersion: skaffold/v2beta21
kind: Config

deploy:
  helm:
    releases:
      - name: global
        createNamespace: true
        chartPath: charts/global
        setValueTemplates:
          global.version: "{{.RELEASE_VERSION}}"
          global.projectName: "{{.PROJECT_NAME}}"
          global.isMainRegion: "{{.IS_MAIN_REGION}}"
          global.region: "{{.AWS_REGION}}"
          global.domain: "{{.DOMAIN}}"
          external-dns.txtPrefix: "{{.AWS_REGION}}."
          external-dns.txtOwnerId: "{{.PROJECT_NAME}}"
          letsencrypt.email: "{{.SUPPORT_EMAIL}}"
          kube-prometheus-stack.prometheus.prometheusSpec.externalLabels.region: "{{.AWS_REGION}}"
          # kube-prometheus-stack.prometheus.prometheusSpec.externalLabels.version: "{{.RELEASE_VERSION}}"
          kube-prometheus-stack.grafana.enabled: "{{.IS_MAIN_REGION}}"
          thanos.query.enabled: "{{.IS_MAIN_REGION}}"
          thanos.queryFrontend.enabled: "{{.IS_MAIN_REGION}}"
          # thanos.compactor.enabled: "{{.IS_MAIN_REGION}}"
          thanos.storegateway.enabled: "{{.IS_MAIN_REGION}}"
      - name: geth
        createNamespace: true
        chartPath: charts/geth
        setValueTemplates:
          geth.version: "{{.GETH_VERSION}}"
          geth.region: "{{.AWS_REGION}}"
      # - name: arbitrum
      #   createNamespace: true
      #   chartPath: charts/arbitrum
      #   setValueTemplates:
      #     arbitrum.version: "{{.ARBITRUM_VERSION}}"
      #     arbitrum.infuraProjectId: "{{.INFURA_PROJECT_ID}}"
      - name: orchestrator
        createNamespace: true
        chartPath: charts/orchestrator
        setValueTemplates:
          orchestrator.region: "{{.AWS_REGION}}"
          orchestrator.domain: "{{.DOMAIN}}"
          orchestrator.ethAddress: "{{.ETH_ADDRESS}}"
          orchestrator.version: "{{.LIVEPEER_VERSION}}"
          orchestrator.pricePerUnit: "{{.PRICE_PER_UNIT}}"
          orchestrator.reward: "{{.REWARD}}"
          orchestrator.jsonWalletPassword: "{{.JSON_WALLET_PASSWORD}}"
